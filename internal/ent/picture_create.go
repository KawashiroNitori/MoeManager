// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KawashiroNitori/MoeManager/internal/ent/picture"
)

// PictureCreate is the builder for creating a Picture entity.
type PictureCreate struct {
	config
	mutation *PictureMutation
	hooks    []Hook
}

// SetFilename sets the "filename" field.
func (pc *PictureCreate) SetFilename(s string) *PictureCreate {
	pc.mutation.SetFilename(s)
	return pc
}

// SetOriginalFilename sets the "original_filename" field.
func (pc *PictureCreate) SetOriginalFilename(s string) *PictureCreate {
	pc.mutation.SetOriginalFilename(s)
	return pc
}

// SetDir sets the "dir" field.
func (pc *PictureCreate) SetDir(s string) *PictureCreate {
	pc.mutation.SetDir(s)
	return pc
}

// SetDigest sets the "digest" field.
func (pc *PictureCreate) SetDigest(s string) *PictureCreate {
	pc.mutation.SetDigest(s)
	return pc
}

// SetIsUpscaled sets the "is_upscaled" field.
func (pc *PictureCreate) SetIsUpscaled(b bool) *PictureCreate {
	pc.mutation.SetIsUpscaled(b)
	return pc
}

// SetNillableIsUpscaled sets the "is_upscaled" field if the given value is not nil.
func (pc *PictureCreate) SetNillableIsUpscaled(b *bool) *PictureCreate {
	if b != nil {
		pc.SetIsUpscaled(*b)
	}
	return pc
}

// SetOriginalWidth sets the "original_width" field.
func (pc *PictureCreate) SetOriginalWidth(i int) *PictureCreate {
	pc.mutation.SetOriginalWidth(i)
	return pc
}

// SetOriginalHeight sets the "original_height" field.
func (pc *PictureCreate) SetOriginalHeight(i int) *PictureCreate {
	pc.mutation.SetOriginalHeight(i)
	return pc
}

// SetUpscaledWidth sets the "upscaled_width" field.
func (pc *PictureCreate) SetUpscaledWidth(i int) *PictureCreate {
	pc.mutation.SetUpscaledWidth(i)
	return pc
}

// SetNillableUpscaledWidth sets the "upscaled_width" field if the given value is not nil.
func (pc *PictureCreate) SetNillableUpscaledWidth(i *int) *PictureCreate {
	if i != nil {
		pc.SetUpscaledWidth(*i)
	}
	return pc
}

// SetUpscaledHeight sets the "upscaled_height" field.
func (pc *PictureCreate) SetUpscaledHeight(i int) *PictureCreate {
	pc.mutation.SetUpscaledHeight(i)
	return pc
}

// SetNillableUpscaledHeight sets the "upscaled_height" field if the given value is not nil.
func (pc *PictureCreate) SetNillableUpscaledHeight(i *int) *PictureCreate {
	if i != nil {
		pc.SetUpscaledHeight(*i)
	}
	return pc
}

// SetUpscaleRatio sets the "upscale_ratio" field.
func (pc *PictureCreate) SetUpscaleRatio(i int) *PictureCreate {
	pc.mutation.SetUpscaleRatio(i)
	return pc
}

// SetNillableUpscaleRatio sets the "upscale_ratio" field if the given value is not nil.
func (pc *PictureCreate) SetNillableUpscaleRatio(i *int) *PictureCreate {
	if i != nil {
		pc.SetUpscaleRatio(*i)
	}
	return pc
}

// SetErrorMessage sets the "error_message" field.
func (pc *PictureCreate) SetErrorMessage(s string) *PictureCreate {
	pc.mutation.SetErrorMessage(s)
	return pc
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (pc *PictureCreate) SetNillableErrorMessage(s *string) *PictureCreate {
	if s != nil {
		pc.SetErrorMessage(*s)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *PictureCreate) SetStatus(pi picture.Status) *PictureCreate {
	pc.mutation.SetStatus(pi)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PictureCreate) SetNillableStatus(pi *picture.Status) *PictureCreate {
	if pi != nil {
		pc.SetStatus(*pi)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PictureCreate) SetCreatedAt(t time.Time) *PictureCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PictureCreate) SetNillableCreatedAt(t *time.Time) *PictureCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// Mutation returns the PictureMutation object of the builder.
func (pc *PictureCreate) Mutation() *PictureMutation {
	return pc.mutation
}

// Save creates the Picture in the database.
func (pc *PictureCreate) Save(ctx context.Context) (*Picture, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PictureCreate) SaveX(ctx context.Context) *Picture {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PictureCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PictureCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PictureCreate) defaults() {
	if _, ok := pc.mutation.IsUpscaled(); !ok {
		v := picture.DefaultIsUpscaled
		pc.mutation.SetIsUpscaled(v)
	}
	if _, ok := pc.mutation.UpscaledWidth(); !ok {
		v := picture.DefaultUpscaledWidth
		pc.mutation.SetUpscaledWidth(v)
	}
	if _, ok := pc.mutation.UpscaledHeight(); !ok {
		v := picture.DefaultUpscaledHeight
		pc.mutation.SetUpscaledHeight(v)
	}
	if _, ok := pc.mutation.UpscaleRatio(); !ok {
		v := picture.DefaultUpscaleRatio
		pc.mutation.SetUpscaleRatio(v)
	}
	if _, ok := pc.mutation.ErrorMessage(); !ok {
		v := picture.DefaultErrorMessage
		pc.mutation.SetErrorMessage(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := picture.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := picture.DefaultCreatedAt
		pc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PictureCreate) check() error {
	if _, ok := pc.mutation.Filename(); !ok {
		return &ValidationError{Name: "filename", err: errors.New(`ent: missing required field "Picture.filename"`)}
	}
	if _, ok := pc.mutation.OriginalFilename(); !ok {
		return &ValidationError{Name: "original_filename", err: errors.New(`ent: missing required field "Picture.original_filename"`)}
	}
	if _, ok := pc.mutation.Dir(); !ok {
		return &ValidationError{Name: "dir", err: errors.New(`ent: missing required field "Picture.dir"`)}
	}
	if _, ok := pc.mutation.Digest(); !ok {
		return &ValidationError{Name: "digest", err: errors.New(`ent: missing required field "Picture.digest"`)}
	}
	if _, ok := pc.mutation.IsUpscaled(); !ok {
		return &ValidationError{Name: "is_upscaled", err: errors.New(`ent: missing required field "Picture.is_upscaled"`)}
	}
	if _, ok := pc.mutation.OriginalWidth(); !ok {
		return &ValidationError{Name: "original_width", err: errors.New(`ent: missing required field "Picture.original_width"`)}
	}
	if _, ok := pc.mutation.OriginalHeight(); !ok {
		return &ValidationError{Name: "original_height", err: errors.New(`ent: missing required field "Picture.original_height"`)}
	}
	if _, ok := pc.mutation.UpscaledWidth(); !ok {
		return &ValidationError{Name: "upscaled_width", err: errors.New(`ent: missing required field "Picture.upscaled_width"`)}
	}
	if _, ok := pc.mutation.UpscaledHeight(); !ok {
		return &ValidationError{Name: "upscaled_height", err: errors.New(`ent: missing required field "Picture.upscaled_height"`)}
	}
	if _, ok := pc.mutation.UpscaleRatio(); !ok {
		return &ValidationError{Name: "upscale_ratio", err: errors.New(`ent: missing required field "Picture.upscale_ratio"`)}
	}
	if _, ok := pc.mutation.ErrorMessage(); !ok {
		return &ValidationError{Name: "error_message", err: errors.New(`ent: missing required field "Picture.error_message"`)}
	}
	if _, ok := pc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Picture.status"`)}
	}
	if v, ok := pc.mutation.Status(); ok {
		if err := picture.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Picture.status": %w`, err)}
		}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Picture.created_at"`)}
	}
	return nil
}

func (pc *PictureCreate) sqlSave(ctx context.Context) (*Picture, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PictureCreate) createSpec() (*Picture, *sqlgraph.CreateSpec) {
	var (
		_node = &Picture{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(picture.Table, sqlgraph.NewFieldSpec(picture.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.Filename(); ok {
		_spec.SetField(picture.FieldFilename, field.TypeString, value)
		_node.Filename = value
	}
	if value, ok := pc.mutation.OriginalFilename(); ok {
		_spec.SetField(picture.FieldOriginalFilename, field.TypeString, value)
		_node.OriginalFilename = value
	}
	if value, ok := pc.mutation.Dir(); ok {
		_spec.SetField(picture.FieldDir, field.TypeString, value)
		_node.Dir = value
	}
	if value, ok := pc.mutation.Digest(); ok {
		_spec.SetField(picture.FieldDigest, field.TypeString, value)
		_node.Digest = value
	}
	if value, ok := pc.mutation.IsUpscaled(); ok {
		_spec.SetField(picture.FieldIsUpscaled, field.TypeBool, value)
		_node.IsUpscaled = value
	}
	if value, ok := pc.mutation.OriginalWidth(); ok {
		_spec.SetField(picture.FieldOriginalWidth, field.TypeInt, value)
		_node.OriginalWidth = value
	}
	if value, ok := pc.mutation.OriginalHeight(); ok {
		_spec.SetField(picture.FieldOriginalHeight, field.TypeInt, value)
		_node.OriginalHeight = value
	}
	if value, ok := pc.mutation.UpscaledWidth(); ok {
		_spec.SetField(picture.FieldUpscaledWidth, field.TypeInt, value)
		_node.UpscaledWidth = value
	}
	if value, ok := pc.mutation.UpscaledHeight(); ok {
		_spec.SetField(picture.FieldUpscaledHeight, field.TypeInt, value)
		_node.UpscaledHeight = value
	}
	if value, ok := pc.mutation.UpscaleRatio(); ok {
		_spec.SetField(picture.FieldUpscaleRatio, field.TypeInt, value)
		_node.UpscaleRatio = value
	}
	if value, ok := pc.mutation.ErrorMessage(); ok {
		_spec.SetField(picture.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(picture.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(picture.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// PictureCreateBulk is the builder for creating many Picture entities in bulk.
type PictureCreateBulk struct {
	config
	err      error
	builders []*PictureCreate
}

// Save creates the Picture entities in the database.
func (pcb *PictureCreateBulk) Save(ctx context.Context) ([]*Picture, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Picture, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PictureMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PictureCreateBulk) SaveX(ctx context.Context) []*Picture {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PictureCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PictureCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
