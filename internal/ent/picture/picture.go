// Code generated by ent, DO NOT EDIT.

package picture

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the picture type in the database.
	Label = "picture"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFilename holds the string denoting the filename field in the database.
	FieldFilename = "filename"
	// FieldOriginalFilename holds the string denoting the original_filename field in the database.
	FieldOriginalFilename = "original_filename"
	// FieldDir holds the string denoting the dir field in the database.
	FieldDir = "dir"
	// FieldDigest holds the string denoting the digest field in the database.
	FieldDigest = "digest"
	// FieldIsUpscaled holds the string denoting the is_upscaled field in the database.
	FieldIsUpscaled = "is_upscaled"
	// FieldOriginalWidth holds the string denoting the original_width field in the database.
	FieldOriginalWidth = "original_width"
	// FieldOriginalHeight holds the string denoting the original_height field in the database.
	FieldOriginalHeight = "original_height"
	// FieldUpscaledWidth holds the string denoting the upscaled_width field in the database.
	FieldUpscaledWidth = "upscaled_width"
	// FieldUpscaledHeight holds the string denoting the upscaled_height field in the database.
	FieldUpscaledHeight = "upscaled_height"
	// FieldUpscaleRatio holds the string denoting the upscale_ratio field in the database.
	FieldUpscaleRatio = "upscale_ratio"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// Table holds the table name of the picture in the database.
	Table = "pictures"
)

// Columns holds all SQL columns for picture fields.
var Columns = []string{
	FieldID,
	FieldFilename,
	FieldOriginalFilename,
	FieldDir,
	FieldDigest,
	FieldIsUpscaled,
	FieldOriginalWidth,
	FieldOriginalHeight,
	FieldUpscaledWidth,
	FieldUpscaledHeight,
	FieldUpscaleRatio,
	FieldErrorMessage,
	FieldStatus,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsUpscaled holds the default value on creation for the "is_upscaled" field.
	DefaultIsUpscaled bool
	// DefaultUpscaledWidth holds the default value on creation for the "upscaled_width" field.
	DefaultUpscaledWidth int
	// DefaultUpscaledHeight holds the default value on creation for the "upscaled_height" field.
	DefaultUpscaledHeight int
	// DefaultUpscaleRatio holds the default value on creation for the "upscale_ratio" field.
	DefaultUpscaleRatio int
	// DefaultErrorMessage holds the default value on creation for the "error_message" field.
	DefaultErrorMessage string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// StatusUnknown is the default value of the Status enum.
const DefaultStatus = StatusUnknown

// Status values.
const (
	StatusUnknown    Status = "unknown"
	StatusProcessing Status = "processing"
	StatusDone       Status = "done"
	StatusError      Status = "error"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusUnknown, StatusProcessing, StatusDone, StatusError:
		return nil
	default:
		return fmt.Errorf("picture: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Picture queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFilename orders the results by the filename field.
func ByFilename(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFilename, opts...).ToFunc()
}

// ByOriginalFilename orders the results by the original_filename field.
func ByOriginalFilename(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginalFilename, opts...).ToFunc()
}

// ByDir orders the results by the dir field.
func ByDir(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDir, opts...).ToFunc()
}

// ByDigest orders the results by the digest field.
func ByDigest(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDigest, opts...).ToFunc()
}

// ByIsUpscaled orders the results by the is_upscaled field.
func ByIsUpscaled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsUpscaled, opts...).ToFunc()
}

// ByOriginalWidth orders the results by the original_width field.
func ByOriginalWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginalWidth, opts...).ToFunc()
}

// ByOriginalHeight orders the results by the original_height field.
func ByOriginalHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginalHeight, opts...).ToFunc()
}

// ByUpscaledWidth orders the results by the upscaled_width field.
func ByUpscaledWidth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpscaledWidth, opts...).ToFunc()
}

// ByUpscaledHeight orders the results by the upscaled_height field.
func ByUpscaledHeight(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpscaledHeight, opts...).ToFunc()
}

// ByUpscaleRatio orders the results by the upscale_ratio field.
func ByUpscaleRatio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpscaleRatio, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}
