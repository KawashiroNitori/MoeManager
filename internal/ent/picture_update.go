// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/KawashiroNitori/MoeManager/internal/ent/picture"
	"github.com/KawashiroNitori/MoeManager/internal/ent/predicate"
)

// PictureUpdate is the builder for updating Picture entities.
type PictureUpdate struct {
	config
	hooks    []Hook
	mutation *PictureMutation
}

// Where appends a list predicates to the PictureUpdate builder.
func (pu *PictureUpdate) Where(ps ...predicate.Picture) *PictureUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetFilename sets the "filename" field.
func (pu *PictureUpdate) SetFilename(s string) *PictureUpdate {
	pu.mutation.SetFilename(s)
	return pu
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (pu *PictureUpdate) SetNillableFilename(s *string) *PictureUpdate {
	if s != nil {
		pu.SetFilename(*s)
	}
	return pu
}

// SetOriginalFilename sets the "original_filename" field.
func (pu *PictureUpdate) SetOriginalFilename(s string) *PictureUpdate {
	pu.mutation.SetOriginalFilename(s)
	return pu
}

// SetNillableOriginalFilename sets the "original_filename" field if the given value is not nil.
func (pu *PictureUpdate) SetNillableOriginalFilename(s *string) *PictureUpdate {
	if s != nil {
		pu.SetOriginalFilename(*s)
	}
	return pu
}

// SetDir sets the "dir" field.
func (pu *PictureUpdate) SetDir(s string) *PictureUpdate {
	pu.mutation.SetDir(s)
	return pu
}

// SetNillableDir sets the "dir" field if the given value is not nil.
func (pu *PictureUpdate) SetNillableDir(s *string) *PictureUpdate {
	if s != nil {
		pu.SetDir(*s)
	}
	return pu
}

// SetDigest sets the "digest" field.
func (pu *PictureUpdate) SetDigest(s string) *PictureUpdate {
	pu.mutation.SetDigest(s)
	return pu
}

// SetNillableDigest sets the "digest" field if the given value is not nil.
func (pu *PictureUpdate) SetNillableDigest(s *string) *PictureUpdate {
	if s != nil {
		pu.SetDigest(*s)
	}
	return pu
}

// SetIsUpscaled sets the "is_upscaled" field.
func (pu *PictureUpdate) SetIsUpscaled(b bool) *PictureUpdate {
	pu.mutation.SetIsUpscaled(b)
	return pu
}

// SetNillableIsUpscaled sets the "is_upscaled" field if the given value is not nil.
func (pu *PictureUpdate) SetNillableIsUpscaled(b *bool) *PictureUpdate {
	if b != nil {
		pu.SetIsUpscaled(*b)
	}
	return pu
}

// SetOriginalWidth sets the "original_width" field.
func (pu *PictureUpdate) SetOriginalWidth(i int) *PictureUpdate {
	pu.mutation.ResetOriginalWidth()
	pu.mutation.SetOriginalWidth(i)
	return pu
}

// SetNillableOriginalWidth sets the "original_width" field if the given value is not nil.
func (pu *PictureUpdate) SetNillableOriginalWidth(i *int) *PictureUpdate {
	if i != nil {
		pu.SetOriginalWidth(*i)
	}
	return pu
}

// AddOriginalWidth adds i to the "original_width" field.
func (pu *PictureUpdate) AddOriginalWidth(i int) *PictureUpdate {
	pu.mutation.AddOriginalWidth(i)
	return pu
}

// SetOriginalHeight sets the "original_height" field.
func (pu *PictureUpdate) SetOriginalHeight(i int) *PictureUpdate {
	pu.mutation.ResetOriginalHeight()
	pu.mutation.SetOriginalHeight(i)
	return pu
}

// SetNillableOriginalHeight sets the "original_height" field if the given value is not nil.
func (pu *PictureUpdate) SetNillableOriginalHeight(i *int) *PictureUpdate {
	if i != nil {
		pu.SetOriginalHeight(*i)
	}
	return pu
}

// AddOriginalHeight adds i to the "original_height" field.
func (pu *PictureUpdate) AddOriginalHeight(i int) *PictureUpdate {
	pu.mutation.AddOriginalHeight(i)
	return pu
}

// SetUpscaledWidth sets the "upscaled_width" field.
func (pu *PictureUpdate) SetUpscaledWidth(i int) *PictureUpdate {
	pu.mutation.ResetUpscaledWidth()
	pu.mutation.SetUpscaledWidth(i)
	return pu
}

// SetNillableUpscaledWidth sets the "upscaled_width" field if the given value is not nil.
func (pu *PictureUpdate) SetNillableUpscaledWidth(i *int) *PictureUpdate {
	if i != nil {
		pu.SetUpscaledWidth(*i)
	}
	return pu
}

// AddUpscaledWidth adds i to the "upscaled_width" field.
func (pu *PictureUpdate) AddUpscaledWidth(i int) *PictureUpdate {
	pu.mutation.AddUpscaledWidth(i)
	return pu
}

// SetUpscaledHeight sets the "upscaled_height" field.
func (pu *PictureUpdate) SetUpscaledHeight(i int) *PictureUpdate {
	pu.mutation.ResetUpscaledHeight()
	pu.mutation.SetUpscaledHeight(i)
	return pu
}

// SetNillableUpscaledHeight sets the "upscaled_height" field if the given value is not nil.
func (pu *PictureUpdate) SetNillableUpscaledHeight(i *int) *PictureUpdate {
	if i != nil {
		pu.SetUpscaledHeight(*i)
	}
	return pu
}

// AddUpscaledHeight adds i to the "upscaled_height" field.
func (pu *PictureUpdate) AddUpscaledHeight(i int) *PictureUpdate {
	pu.mutation.AddUpscaledHeight(i)
	return pu
}

// SetUpscaleRatio sets the "upscale_ratio" field.
func (pu *PictureUpdate) SetUpscaleRatio(i int) *PictureUpdate {
	pu.mutation.ResetUpscaleRatio()
	pu.mutation.SetUpscaleRatio(i)
	return pu
}

// SetNillableUpscaleRatio sets the "upscale_ratio" field if the given value is not nil.
func (pu *PictureUpdate) SetNillableUpscaleRatio(i *int) *PictureUpdate {
	if i != nil {
		pu.SetUpscaleRatio(*i)
	}
	return pu
}

// AddUpscaleRatio adds i to the "upscale_ratio" field.
func (pu *PictureUpdate) AddUpscaleRatio(i int) *PictureUpdate {
	pu.mutation.AddUpscaleRatio(i)
	return pu
}

// SetErrorMessage sets the "error_message" field.
func (pu *PictureUpdate) SetErrorMessage(s string) *PictureUpdate {
	pu.mutation.SetErrorMessage(s)
	return pu
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (pu *PictureUpdate) SetNillableErrorMessage(s *string) *PictureUpdate {
	if s != nil {
		pu.SetErrorMessage(*s)
	}
	return pu
}

// SetStatus sets the "status" field.
func (pu *PictureUpdate) SetStatus(pi picture.Status) *PictureUpdate {
	pu.mutation.SetStatus(pi)
	return pu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pu *PictureUpdate) SetNillableStatus(pi *picture.Status) *PictureUpdate {
	if pi != nil {
		pu.SetStatus(*pi)
	}
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PictureUpdate) SetCreatedAt(t time.Time) *PictureUpdate {
	pu.mutation.SetCreatedAt(t)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PictureUpdate) SetNillableCreatedAt(t *time.Time) *PictureUpdate {
	if t != nil {
		pu.SetCreatedAt(*t)
	}
	return pu
}

// Mutation returns the PictureMutation object of the builder.
func (pu *PictureUpdate) Mutation() *PictureMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PictureUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PictureUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PictureUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PictureUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PictureUpdate) check() error {
	if v, ok := pu.mutation.Status(); ok {
		if err := picture.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Picture.status": %w`, err)}
		}
	}
	return nil
}

func (pu *PictureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(picture.Table, picture.Columns, sqlgraph.NewFieldSpec(picture.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Filename(); ok {
		_spec.SetField(picture.FieldFilename, field.TypeString, value)
	}
	if value, ok := pu.mutation.OriginalFilename(); ok {
		_spec.SetField(picture.FieldOriginalFilename, field.TypeString, value)
	}
	if value, ok := pu.mutation.Dir(); ok {
		_spec.SetField(picture.FieldDir, field.TypeString, value)
	}
	if value, ok := pu.mutation.Digest(); ok {
		_spec.SetField(picture.FieldDigest, field.TypeString, value)
	}
	if value, ok := pu.mutation.IsUpscaled(); ok {
		_spec.SetField(picture.FieldIsUpscaled, field.TypeBool, value)
	}
	if value, ok := pu.mutation.OriginalWidth(); ok {
		_spec.SetField(picture.FieldOriginalWidth, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedOriginalWidth(); ok {
		_spec.AddField(picture.FieldOriginalWidth, field.TypeInt, value)
	}
	if value, ok := pu.mutation.OriginalHeight(); ok {
		_spec.SetField(picture.FieldOriginalHeight, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedOriginalHeight(); ok {
		_spec.AddField(picture.FieldOriginalHeight, field.TypeInt, value)
	}
	if value, ok := pu.mutation.UpscaledWidth(); ok {
		_spec.SetField(picture.FieldUpscaledWidth, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedUpscaledWidth(); ok {
		_spec.AddField(picture.FieldUpscaledWidth, field.TypeInt, value)
	}
	if value, ok := pu.mutation.UpscaledHeight(); ok {
		_spec.SetField(picture.FieldUpscaledHeight, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedUpscaledHeight(); ok {
		_spec.AddField(picture.FieldUpscaledHeight, field.TypeInt, value)
	}
	if value, ok := pu.mutation.UpscaleRatio(); ok {
		_spec.SetField(picture.FieldUpscaleRatio, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedUpscaleRatio(); ok {
		_spec.AddField(picture.FieldUpscaleRatio, field.TypeInt, value)
	}
	if value, ok := pu.mutation.ErrorMessage(); ok {
		_spec.SetField(picture.FieldErrorMessage, field.TypeString, value)
	}
	if value, ok := pu.mutation.Status(); ok {
		_spec.SetField(picture.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(picture.FieldCreatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{picture.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PictureUpdateOne is the builder for updating a single Picture entity.
type PictureUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PictureMutation
}

// SetFilename sets the "filename" field.
func (puo *PictureUpdateOne) SetFilename(s string) *PictureUpdateOne {
	puo.mutation.SetFilename(s)
	return puo
}

// SetNillableFilename sets the "filename" field if the given value is not nil.
func (puo *PictureUpdateOne) SetNillableFilename(s *string) *PictureUpdateOne {
	if s != nil {
		puo.SetFilename(*s)
	}
	return puo
}

// SetOriginalFilename sets the "original_filename" field.
func (puo *PictureUpdateOne) SetOriginalFilename(s string) *PictureUpdateOne {
	puo.mutation.SetOriginalFilename(s)
	return puo
}

// SetNillableOriginalFilename sets the "original_filename" field if the given value is not nil.
func (puo *PictureUpdateOne) SetNillableOriginalFilename(s *string) *PictureUpdateOne {
	if s != nil {
		puo.SetOriginalFilename(*s)
	}
	return puo
}

// SetDir sets the "dir" field.
func (puo *PictureUpdateOne) SetDir(s string) *PictureUpdateOne {
	puo.mutation.SetDir(s)
	return puo
}

// SetNillableDir sets the "dir" field if the given value is not nil.
func (puo *PictureUpdateOne) SetNillableDir(s *string) *PictureUpdateOne {
	if s != nil {
		puo.SetDir(*s)
	}
	return puo
}

// SetDigest sets the "digest" field.
func (puo *PictureUpdateOne) SetDigest(s string) *PictureUpdateOne {
	puo.mutation.SetDigest(s)
	return puo
}

// SetNillableDigest sets the "digest" field if the given value is not nil.
func (puo *PictureUpdateOne) SetNillableDigest(s *string) *PictureUpdateOne {
	if s != nil {
		puo.SetDigest(*s)
	}
	return puo
}

// SetIsUpscaled sets the "is_upscaled" field.
func (puo *PictureUpdateOne) SetIsUpscaled(b bool) *PictureUpdateOne {
	puo.mutation.SetIsUpscaled(b)
	return puo
}

// SetNillableIsUpscaled sets the "is_upscaled" field if the given value is not nil.
func (puo *PictureUpdateOne) SetNillableIsUpscaled(b *bool) *PictureUpdateOne {
	if b != nil {
		puo.SetIsUpscaled(*b)
	}
	return puo
}

// SetOriginalWidth sets the "original_width" field.
func (puo *PictureUpdateOne) SetOriginalWidth(i int) *PictureUpdateOne {
	puo.mutation.ResetOriginalWidth()
	puo.mutation.SetOriginalWidth(i)
	return puo
}

// SetNillableOriginalWidth sets the "original_width" field if the given value is not nil.
func (puo *PictureUpdateOne) SetNillableOriginalWidth(i *int) *PictureUpdateOne {
	if i != nil {
		puo.SetOriginalWidth(*i)
	}
	return puo
}

// AddOriginalWidth adds i to the "original_width" field.
func (puo *PictureUpdateOne) AddOriginalWidth(i int) *PictureUpdateOne {
	puo.mutation.AddOriginalWidth(i)
	return puo
}

// SetOriginalHeight sets the "original_height" field.
func (puo *PictureUpdateOne) SetOriginalHeight(i int) *PictureUpdateOne {
	puo.mutation.ResetOriginalHeight()
	puo.mutation.SetOriginalHeight(i)
	return puo
}

// SetNillableOriginalHeight sets the "original_height" field if the given value is not nil.
func (puo *PictureUpdateOne) SetNillableOriginalHeight(i *int) *PictureUpdateOne {
	if i != nil {
		puo.SetOriginalHeight(*i)
	}
	return puo
}

// AddOriginalHeight adds i to the "original_height" field.
func (puo *PictureUpdateOne) AddOriginalHeight(i int) *PictureUpdateOne {
	puo.mutation.AddOriginalHeight(i)
	return puo
}

// SetUpscaledWidth sets the "upscaled_width" field.
func (puo *PictureUpdateOne) SetUpscaledWidth(i int) *PictureUpdateOne {
	puo.mutation.ResetUpscaledWidth()
	puo.mutation.SetUpscaledWidth(i)
	return puo
}

// SetNillableUpscaledWidth sets the "upscaled_width" field if the given value is not nil.
func (puo *PictureUpdateOne) SetNillableUpscaledWidth(i *int) *PictureUpdateOne {
	if i != nil {
		puo.SetUpscaledWidth(*i)
	}
	return puo
}

// AddUpscaledWidth adds i to the "upscaled_width" field.
func (puo *PictureUpdateOne) AddUpscaledWidth(i int) *PictureUpdateOne {
	puo.mutation.AddUpscaledWidth(i)
	return puo
}

// SetUpscaledHeight sets the "upscaled_height" field.
func (puo *PictureUpdateOne) SetUpscaledHeight(i int) *PictureUpdateOne {
	puo.mutation.ResetUpscaledHeight()
	puo.mutation.SetUpscaledHeight(i)
	return puo
}

// SetNillableUpscaledHeight sets the "upscaled_height" field if the given value is not nil.
func (puo *PictureUpdateOne) SetNillableUpscaledHeight(i *int) *PictureUpdateOne {
	if i != nil {
		puo.SetUpscaledHeight(*i)
	}
	return puo
}

// AddUpscaledHeight adds i to the "upscaled_height" field.
func (puo *PictureUpdateOne) AddUpscaledHeight(i int) *PictureUpdateOne {
	puo.mutation.AddUpscaledHeight(i)
	return puo
}

// SetUpscaleRatio sets the "upscale_ratio" field.
func (puo *PictureUpdateOne) SetUpscaleRatio(i int) *PictureUpdateOne {
	puo.mutation.ResetUpscaleRatio()
	puo.mutation.SetUpscaleRatio(i)
	return puo
}

// SetNillableUpscaleRatio sets the "upscale_ratio" field if the given value is not nil.
func (puo *PictureUpdateOne) SetNillableUpscaleRatio(i *int) *PictureUpdateOne {
	if i != nil {
		puo.SetUpscaleRatio(*i)
	}
	return puo
}

// AddUpscaleRatio adds i to the "upscale_ratio" field.
func (puo *PictureUpdateOne) AddUpscaleRatio(i int) *PictureUpdateOne {
	puo.mutation.AddUpscaleRatio(i)
	return puo
}

// SetErrorMessage sets the "error_message" field.
func (puo *PictureUpdateOne) SetErrorMessage(s string) *PictureUpdateOne {
	puo.mutation.SetErrorMessage(s)
	return puo
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (puo *PictureUpdateOne) SetNillableErrorMessage(s *string) *PictureUpdateOne {
	if s != nil {
		puo.SetErrorMessage(*s)
	}
	return puo
}

// SetStatus sets the "status" field.
func (puo *PictureUpdateOne) SetStatus(pi picture.Status) *PictureUpdateOne {
	puo.mutation.SetStatus(pi)
	return puo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (puo *PictureUpdateOne) SetNillableStatus(pi *picture.Status) *PictureUpdateOne {
	if pi != nil {
		puo.SetStatus(*pi)
	}
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PictureUpdateOne) SetCreatedAt(t time.Time) *PictureUpdateOne {
	puo.mutation.SetCreatedAt(t)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PictureUpdateOne) SetNillableCreatedAt(t *time.Time) *PictureUpdateOne {
	if t != nil {
		puo.SetCreatedAt(*t)
	}
	return puo
}

// Mutation returns the PictureMutation object of the builder.
func (puo *PictureUpdateOne) Mutation() *PictureMutation {
	return puo.mutation
}

// Where appends a list predicates to the PictureUpdate builder.
func (puo *PictureUpdateOne) Where(ps ...predicate.Picture) *PictureUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PictureUpdateOne) Select(field string, fields ...string) *PictureUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Picture entity.
func (puo *PictureUpdateOne) Save(ctx context.Context) (*Picture, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PictureUpdateOne) SaveX(ctx context.Context) *Picture {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PictureUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PictureUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PictureUpdateOne) check() error {
	if v, ok := puo.mutation.Status(); ok {
		if err := picture.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Picture.status": %w`, err)}
		}
	}
	return nil
}

func (puo *PictureUpdateOne) sqlSave(ctx context.Context) (_node *Picture, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(picture.Table, picture.Columns, sqlgraph.NewFieldSpec(picture.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Picture.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, picture.FieldID)
		for _, f := range fields {
			if !picture.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != picture.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Filename(); ok {
		_spec.SetField(picture.FieldFilename, field.TypeString, value)
	}
	if value, ok := puo.mutation.OriginalFilename(); ok {
		_spec.SetField(picture.FieldOriginalFilename, field.TypeString, value)
	}
	if value, ok := puo.mutation.Dir(); ok {
		_spec.SetField(picture.FieldDir, field.TypeString, value)
	}
	if value, ok := puo.mutation.Digest(); ok {
		_spec.SetField(picture.FieldDigest, field.TypeString, value)
	}
	if value, ok := puo.mutation.IsUpscaled(); ok {
		_spec.SetField(picture.FieldIsUpscaled, field.TypeBool, value)
	}
	if value, ok := puo.mutation.OriginalWidth(); ok {
		_spec.SetField(picture.FieldOriginalWidth, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedOriginalWidth(); ok {
		_spec.AddField(picture.FieldOriginalWidth, field.TypeInt, value)
	}
	if value, ok := puo.mutation.OriginalHeight(); ok {
		_spec.SetField(picture.FieldOriginalHeight, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedOriginalHeight(); ok {
		_spec.AddField(picture.FieldOriginalHeight, field.TypeInt, value)
	}
	if value, ok := puo.mutation.UpscaledWidth(); ok {
		_spec.SetField(picture.FieldUpscaledWidth, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedUpscaledWidth(); ok {
		_spec.AddField(picture.FieldUpscaledWidth, field.TypeInt, value)
	}
	if value, ok := puo.mutation.UpscaledHeight(); ok {
		_spec.SetField(picture.FieldUpscaledHeight, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedUpscaledHeight(); ok {
		_spec.AddField(picture.FieldUpscaledHeight, field.TypeInt, value)
	}
	if value, ok := puo.mutation.UpscaleRatio(); ok {
		_spec.SetField(picture.FieldUpscaleRatio, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedUpscaleRatio(); ok {
		_spec.AddField(picture.FieldUpscaleRatio, field.TypeInt, value)
	}
	if value, ok := puo.mutation.ErrorMessage(); ok {
		_spec.SetField(picture.FieldErrorMessage, field.TypeString, value)
	}
	if value, ok := puo.mutation.Status(); ok {
		_spec.SetField(picture.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(picture.FieldCreatedAt, field.TypeTime, value)
	}
	_node = &Picture{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{picture.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
